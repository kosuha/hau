name: HAU API Server CI/CD Pipeline

permissions:
  contents: read
  packages: write

on:
  push:
    branches:
      - main
    paths:
      - 'server/**'

jobs:
  # 변경된 폴더를 감지하는 Job (각 Job 실행 여부를 결정하기 위한 출력값 생성)
  paths-filter:
    runs-on: ubuntu-latest
    outputs:
      server: ${{ steps.filter.outputs.server }}
    steps:
      - name: Checkout Code
        uses: actions/checkout@v2

      - name: Filter Changed Paths
        id: filter
        uses: dorny/paths-filter@v2
        with:
          filters: |
            server:
              - 'server/**'

  # 서버 폴더에 변경이 있을 때 실행되는 빌드 및 배포 Job
  server-build-deploy:
    name: Build and Deploy Server via GitHub Packages
    needs: paths-filter
    if: ${{ needs.paths-filter.outputs.server == 'true' }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v2

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and Push Docker Image for Server
        working-directory: server
        run: |
          # 이미지 태그 형식: ghcr.io/<소유자명>/<이미지이름>:태그
          docker build -t ghcr.io/${{ github.repository_owner }}/my-node-server:latest .
          docker push ghcr.io/${{ github.repository_owner }}/my-node-server:latest

      - name: Deploy to AWS EC2
        uses: appleboy/ssh-action@v0.1.5
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            echo "Pulling the latest image from GitHub Container Registry..."
            docker pull ghcr.io/${{ github.repository_owner }}/my-node-server:latest
            echo "Stopping and removing any existing container..."
            docker stop my-node-container || true
            docker rm my-node-container || true
            echo "Starting new container..."
            docker run -d \
              -p 3000:3000 \
              -e APN_BUNDLE_ID="${{ secrets.APN_BUNDLE_ID }}" \
              -e APN_KEY_CONTENT='${{ secrets.APN_KEY_CONTENT }}' \
              -e APN_KEY_ID="${{ secrets.APN_KEY_ID }}" \
              -e APN_TEAM_ID="${{ secrets.APN_TEAM_ID }}" \
              -e NODE_ENV="${{ secrets.NODE_ENV }}" \
              -e OPENAI_API_KEY="${{ secrets.OPENAI_API_KEY }}" \
              -e SUPABASE_KEY="${{ secrets.SUPABASE_KEY }}" \
              -e SUPABASE_URL="${{ secrets.SUPABASE_URL }}" \
              --name my-node-container \
              ghcr.io/${{ github.repository_owner }}/my-node-server:latest
